Check dependencies:

  Mandatory Prerequisites

    Check for CMake:
     -- cmake --version ---> is it CMake 3.4+ ---> if not:  sudo apt-get install cmake
    Check for Eigen:
     -- instructions here: https://www.alecjacobson.com/weblog/?p=3415
     -- is it Eigen 3.3.0+ ---> if not: sudo apt-get install libeigen3-dev

    For python3 install pybind11 via Synaptic or via command line
     -- for Synaptic it is : pybind11-dev and python3-pybind11

    Optional Dependencies

        Install Sophus
         -- instructions here: https://www.programmersought.com/article/8815619131/
         -- But do not use the commit handler, just clone.
         -- Only need to compile, no need to install.

        Install SuiteSparse
         -- sudo apt-get install libsuitesparse-dev


   Compile and install:

      git clone --recurse-submodules https://github.com/dongjing3309/minisam.git
      mkdir build
      cd build
      cmake ..

      Configure cmake via ccmake:
      ccmake .

      Add path to:
        CMAKE_INSTALL_PREFIX="path where you want to be installed, in case installation is to be done"
        Eigen3_DIR="path to the Eigen3, e.g. /usr/include/eigen3"
        MINISAM_WITH_INTERNAL_TIMING ON
        MINISAM_BUILD_PYTHON_PACKAGE ON
        PYBIND11_PYTHON_VERSION 3.6 or the respective version of pybind11


      make
      make check  # optional, run unit tests, better do it
      make python_package

      ? make install  # optional, install the lib (I don't do it) ?

    Create virtual environment:
       python3 -m venv pyminisam
       activate it
       install numpy, matplotlib
       execute setup for the final python linking:
         -- python3 setup.py install
        for info look into: https://stackoverflow.com/questions/1471994/what-is-setup-py

    Test that all works:
      Start python3
        from minisam import *
        from minisam.sophus import *
        import numpy as np
        import math


        # factor graph container
        graph = FactorGraph()

        priorLoss = DiagonalLoss.Sigmas(np.array([1.0, 1.0, 0.1]))
        graph.add(PriorFactor(key('x', 1), SE2(SO2(0), np.array([0, 0])), priorLoss))

        print(graph)

        ----- The output should be :
              Prior Factor, Factor dim = 3
              Factor keys : x1
              Diagonal loss function : R_diag = [ 1  1 10]'
              measured = Sophus::SE2d(0, 0, 0)



end of instructions
